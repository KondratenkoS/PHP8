<?php
	require_once 'User.php';
	require_once 'Employe.php';
	/*
		#1
		Сделайте класс User, в котором будут следующие свойства только для чтения: name и surname.
		Начальные значения этих свойств должны устанавливаться в конструкторе.
		Сделайте также геттеры этих свойств.
		#2
		Модифицируйте предыдущую задачу так, чтобы третьим параметром в конструктор передавалась
		дата рождения работника в формате год-месяц-день. Запишите ее в свойство birthday.
		Сделайте геттер для этого свойства.
		#3
		Модифицируйте предыдущую задачу так, чтобы был приватный метод calculateAge, который
		параметром будет принимать дату рождения, а возвращать возраст с учетом того,
		был ли уже день рождения в этом году, или нет.
		#4
		Модифицируйте предыдущую задачу так, чтобы метод calculateAge вызывался в конструкторе объекта,
		рассчитывал возраст пользователя и записывал его в приватное свойство age.
		Сделайте геттер для этого свойства.
		#5
		Сделайте класс Employee, который будет наследовать от класса User. Пусть новый класс имеет
		свойство salary, в котором будет хранится зарплата работника. Зарплата должна передаваться
		четвертым параметром в конструктор объекта. Сделайте также геттер для этого свойства.
	*/
	$user = new User('Hell', 'Hellovich', '1988-09-15');
	echo '<br>' . $user->getName() . '<br>';
	echo $user->getSurname() . '<br>';
	echo $user->getBirthday() . '<br>';
	echo $user->getAge() . '<br>';
	
	$employe = new Employe('Hell', 'Hellovich', '1988-09-15', 100500);
	echo '<br>' . $user->getName() . '<br>';
	echo $employe->getSurname() . '<br>';
	echo $employe->getBirthday() . '<br>';
	echo $employe->getAge() . '<br>';
	echo $employe->getSalary() . '<br>';